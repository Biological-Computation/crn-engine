(*------------------------------------------------------------------------------------
  Circuit		:	4 bit square root in dual rail logic
  Description :	No private domains are used. Modified FANOUT2 gate is used.
  Notes		:	Use Compilation: Infinite; Set lower copies for simulation
  Source		:	[1]
  Modified by	:	Boyan Yordanov

  Biological Computation Group
  Microsoft Research
  Cambridge UK
  2013

  [1] H. Chandran, N. Gopalkrishnan, A. Phillips, and J. Reif. Localized hybridization
  circuits. DNA17, pages 64{83, 2011.
  ------------------------------------------------------------------------------------*)

(* Setting number of second to be simulated and the number of data points *)
directive duration 36000.0 points 2000
directive scale 1.0
directive compilation infinite
directive leak 1.0E-8 (* Leak rate 10^-8 /nM/s at lambda = 1. Manually multiply by lambda *)
directive tau 1.0 (* Branch migration rate 1/s (from Zhang and Winfree 2009)*)
(* Plots the reporter strand's concentration *)
directive plot <MSB_0a MSB_0b>; <MSB_1a MSB_1b>; <LSB_0a LSB_0b>; <LSB_1a LSB_1b>

(*--------------------- SETTINGS ---------------------------------*)
def num = 12 (* Input number *)
def Copies = 20 (* Number of copies of the circuit *)
def ON = 20 (* Input concentration *)
(*---------------------------------------------------------------*)

(* Defining speedup factor *)
def lambda = 1.0E+0

(* Winfree's parameters*)
def shorttoeholdunbind = 26.0 (* Short toehold dissociation rate constant 26/s *)
def shorttoeholdbind = 50.0 * 5.0E-5 (* Short toehold binding rate constant 5x10^-5/nM/s *)

def untetheredunbind = shorttoeholdunbind (* fast toehold dissociation rate constant /s *)
def untetheredbind = shorttoeholdbind (* slow toehold binding rate constant /nM/s *)

def tetheredunbind = untetheredunbind (* toehold dissociation rate constant /s *)
def tetheredbind = untetheredbind*lambda (* toehold binding rate constant /nM/s *)

(* Definition of the OR, AND, FANOUT and WIRE gates, reporter complex and input strands *)
def STRAND (T, sa, sb) = <T^ sa sb>
def INPUT(T, x, x_0a, x_0b, x_1a, x_1b) = 
  ((1-x) * ON * STRAND(T, x_0a, x_0b) 
  | x * ON * STRAND(T, x_1a, x_1b))
def OR (Ti1, Input1a, Input1b, Ti2, Input2a, Input2b, To, Outputa, Outputb) = 
  ({Ti1^*}[Input1a]:[Input1b To^]<Outputa Outputb> 
  | {Ti2^*}[Input2a]:[Input2b To^]<Outputa Outputb>)
def THREEINPUTOR (Ti1, Input1a, Input1b, Ti2, Input2a, Input2b, Ti3, Input3a, Input3b, To, Outputa, Outputb) = 
  ({Ti1^*}[Input1a]:[Input1b To^]<Outputa Outputb> 
  | {Ti2^*}[Input2a]:[Input2b To^]<Outputa Outputb> | {Ti3^*}[Input3a]:[Input3b To^]<Outputa Outputb>)
def AND (Ti1, Input1a, Input1b, Ti2, Input2a, Input2b, To, Outputa, Outputb) = 
  {Ti1^*}[Input1a]:[Input1b Ti2^]:[Input2a]:[Input2b To^]<Outputa Outputb> 
def THREEINPUTAND (Ti1, Input1a, Input1b, Ti2, Input2a, Input2b, Ti3, Input3a, Input3b, To, Outputa, Outputb) = 
  {Ti1^*}[Input1a]:[Input1b Ti2^]:[Input2a]:[Input2b Ti3^]:[Input3a]:[Input3b To^]<Outputa Outputb>
def WIRE (Ti, Inputa, Inputb, To, Outputa, Outputb) = 
  ({Ti^*}[Inputa]:[Inputb To^]<Outputa Outputb>)
def FANOUT (Ti, Inputa, Inputb, To, Outputa, Outputb, Degree) = 
  ((Degree-1) * <Inputa Inputb To^> 
  | Degree * {Ti^*}[Inputa]:[Inputb To^]<Outputa Outputb>)
def FANOUT2(Ti, Ia, Ib, To, Oa, Ob) = 
  (<To^ Fa Fb> 
  | {Ti^*}[Ia]:[Ib To^]<Oa Ob>:[Fa]:[Fb To^]<Oa Ob>)
def REPORTER (Ti, Inputa, Inputb) =  {Ti^*}[Inputa Inputb]

(* Binary Conversion *)
def x1 = (num+1)/2 - num/2
def x2 = ((num/2)+1)/2 - num/4
def x3 = ((num/4)+1)/2 - num/8
def x4 = ((num/8)+1)/2 - num/16

def MSB(N) = 
( N * AND (T, x3_0a, x3_0b, T, x4_0a, x4_0b, Tmsb_0, MSB_0a, MSB_0b)
| N * REPORTER(Tmsb_0, MSB_0a, MSB_0b)
| N * OR (T, x3_1a, x3_1b, T, x4_1a, x4_1b, Tmsb_1, MSB_1a, MSB_1b)
| N * REPORTER(Tmsb_1, MSB_1a, MSB_1b)
)

def LSB1(N) =  
( N * FANOUT2(T, x4_1a, x4_1b, Tx4_1o, x4_1oa, x4_1ob) 
| N * OR (T, x1_1a, x1_1b, T, x2_1a, x2_1b, Ta1, a1a, a1b)
| N * AND (T, x1_0a, x1_0b, T, x2_0a, x2_0b, Ta2, a2a, a2b)
| N * OR (Tx4_1o, x4_1oa, x4_1ob, T, x3_0a, x3_0b, Ta3, a3a, a3b)
| N * THREEINPUTAND(Tx4_1o, x4_1oa, x4_1ob, T, x3_1a, x3_1b, Ta2, a2a, a2b, Ta4, a4a, a4b)
| N * AND(Ta1, a1a, a1b, Ta3, a3a, a3b, Ta5, a5a, a5b)
| N * OR(Ta4, a4a, a4b, Ta5, a5a, a5b, Tlsb_1, LSB_1a, LSB_1b)
| N * REPORTER(Tlsb_1, LSB_1a, LSB_1b)
)

def LSB0(N) =  
( N * FANOUT2(T, x4_0a, x4_0b, Tx4_0o, x4_0oa, x4_0ob) 
| N * OR (T, x1_1a, x1_1b, T, x2_1a, x2_1b, Ta6, a6a, a6b)
| N * AND (T, x1_0a, x1_0b, T, x2_0a, x2_0b, Ta7, a7a, a7b)
| N * AND (T, x3_1a, x3_1b, Tx4_0o, x4_0oa, x4_0ob, Ta8, a8a, a8b)
| N * THREEINPUTOR(Ta6, a6a, a6b, T, x3_0a, x3_0b, Tx4_0o, x4_0oa, x4_0ob, Ta9, a9a, a9b)
| N * OR(Ta7, a7a, a7b, Ta8, a8a, a8b, Ta10, a10a, a10b)
| N * AND(Ta9, a9a, a9b, Ta10, a10a, a10b, Tlsb_0, LSB_0a, LSB_0b)
| N * REPORTER(Tlsb_0, LSB_0a, LSB_0b)
)

def Input() = 
( INPUT (T, x4, x4_0a, x4_0b, x4_1a, x4_1b) 
| INPUT (T, x3, x3_0a, x3_0b, x3_1a, x3_1b) 
| INPUT (T, x2, x2_0a, x2_0b, x2_1a, x2_1b) 
| INPUT (T, x1, x1_0a, x1_0b, x1_1a, x1_1b)
)

def M0() = <MSB_0a MSB_0b>
def M1() = <MSB_1a MSB_1b>
def L0() = <LSB_0a LSB_0b>
def L1() = <LSB_1a LSB_1b>


def SQUAREROOT(N) = ( 0 * M0() | 0 * M1()| 0 * L0() | 0 * L1() | 
				     Input()
				    | LSB0(N) | LSB1(N) | MSB(N) )

SQUAREROOT(Copies)