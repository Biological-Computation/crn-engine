(*------------------ DnaToolbox implementation ------------------*)

(*------------------ Instructions -------------------------------*)
(*  Press "Graphics" (not "Simulate")                            *)
(*  Then press "Simulate" in the tab Compilation -> Text         *)
(*  (on the right side; it is likely to have just gotten focus)  *)
(*---------------------------------------------------------------*)

(*------------------ Settings -----------------------------------*)
directive sample 500000.0 1000
directive compilation infinite
directive simulation deterministicstiff
(* PI Controller settings *)
directive duration 250000.0 points 1000
directive plot
  sub (<r^>; <r^*>);
  sub (<v^>; <v^*>);
  sub (<y^>; <y^*>);
  sub (<load>; <load'>)

directive event <r^*>  2.0*x0 @  50000.0
directive event <r^>    2.0*x0 @ 100000.0
directive event <load>        2.0 @ 150000.0
directive event <load'>       1.0 @ 200000.0  

(*
directive duration 500000.0 points 1000
directive event <r^*>   2*x0 @  50000.0
directive event <r^>    2*x0 @ 100000.0
directive event <r^*>   2*x0 @ 150000.0
directive event <r^>    2*x0 @ 200000.0
directive event <r^*>   2*x0 @ 250000.0
directive event <r^>    2*x0 @ 300000.0
directive event <r^*>   2*x0 @ 350000.0
directive event <r^>    2*x0 @ 400000.0
directive event <r^*>   2*x0 @ 450000.0
*)

(* Circuit component settings (no events) 
directive duration 10000.0 points 1000
directive plot  X(); X'(); Y(); Y'(); R(); E(); E'(); V(); V'()
*)

directive parameters
  [ deg = 0.0008
  ; pol = 0.0167
  ; nick = 0.0167
  ; x0 = 4.0
  ; ann = 0.01
  ; bind = 5.4e-6
  ; unbind = 0.1126
  ; Cmax = 1000.0 
  ]
 
new x@bind,unbind
new r@bind,unbind
new e@bind,unbind
new v@bind,unbind
new y@bind,unbind

def R()  = <r^>  (* Signal(r) *)
def R'() = <r^*> (* Signal'(r) *)
def E()  = <e^>  (* Signal(e) *)
def E'() = <e^*> (* Signal'(e) *)
def V()  = <v^>  (* Signal(v) *)
def V'() = <v^*> (* Signal'(v) *)
def Y()  = <y^>  (* Signal(y) *)
def Y'() = <y^*> (* Signal'(y) *)
def X() = <x^>
def X'() = <x^*>
def Load() = <load>
def Load'() = <load'>

(* Species *)
def Signal(x) = <x^>
def Signal'(x) = <x^*>
def Template(x,y) = [x^]:[y^]
def Template'(x,y) = [x^*]:[y^*]
def TemplateOff(x,y) = {x^*}[y^]
def TemplateOff'(x,y) = {x^}[y^*]
def TemplateDS(x,y) = [x^ y^]
def TemplateDS'(x,y) = [x^* y^*]

def TemplateOffInv(x,y) = {x^*}[y^*]
def TemplateOffInv'(x,y) = {x^}[y^]
def TemplateInv(x,y) = [x^]:[y^*]
def TemplateInv'(x,y) = [x^*]:[y^]
def TemplateDSInv(x,y) = [x^ y^*]
def TemplateDSInv'(x,y) = [x^* y^]

(*------------------ Basic Reactions -----------------------*)
def Catalysis(k,x,y) = (* x -> x + y *) 
( Cmax*k * TemplateOff(x,y)
| rxn Signal(x) + TemplateOff(x,y) <->{bind}{unbind} Template(x,y)
| rxn Template(x,y) ->{pol} TemplateDS(x,y) + Signal(y)
| rxn TemplateDS(x,y) ->{nick} Template(x,y)
)
def Catalysis'(k,x,y) = (* x' -> x' + y' *) 
( Cmax*k * TemplateOff'(x,y)
| rxn Signal'(x) + TemplateOff'(x,y) <->{bind}{unbind} Template'(x,y)
| rxn Template'(x,y) ->{pol} TemplateDS'(x,y) + Signal'(y)
| rxn TemplateDS'(x,y) ->{nick} Template'(x,y)
)
def CatalysisInv(k,x,y) = (* x -> x + y' *) 
( Cmax*k * TemplateOffInv(x,y)
| rxn Signal(x) + TemplateOffInv(x,y) <->{bind}{unbind} TemplateInv(x,y)
| rxn TemplateInv(x,y) ->{pol} TemplateDSInv(x,y) + Signal'(y)
| rxn TemplateDSInv(x,y) ->{nick} TemplateInv(x,y)
)
def CatalysisInv'(k,x,y) = (* x' -> x' + y *) 
( Cmax*k * TemplateOffInv'(x,y)
| rxn Signal'(x) + TemplateOffInv'(x,y) <->{bind}{unbind} TemplateInv'(x,y)
| rxn TemplateInv'(x,y) ->{pol} TemplateDSInv'(x,y) + Signal(y)
| rxn TemplateDSInv'(x,y) ->{nick} TemplateInv'(x,y)
)
def Degradation(k,x) = CatalysisInv(1.0/k,x,x)
def Degradation'(k,x) = CatalysisInv'(1.0/k,x,x)

def Catalysis2(k,x,y) =
( Catalysis(k,x,y)
| Catalysis'(k,x,y)
)
def Catalysis2Inv(k,x,y) =
( CatalysisInv(k,x,y)
| CatalysisInv'(k,x,y)
)
def Degradation2(k,x) =
( Degradation(k,x)
| Degradation'(k,x)
)
def Annihilation(x) =
  rxn Signal(x) + Signal'(x) ->{ann} [x^]

(*------------------ Blocks --------------------------------*)
def Integration(kI,x,y) = Catalysis2(kI,x,y)    
def Gain(k,kD,x,y) =
( Catalysis2(k,x,y) 
| Degradation2(kD,y)
)
def Summation(k1,k2,kD,x1,x2,y) = 
( Catalysis2(k1,x1,y) 
| Catalysis2(k2,x2,y)
| Degradation2(kD,y)
)
def SummationInv(k1,k2,kD,x1,x2,y) = 
( Catalysis2(k1,x1,y) 
| Catalysis2Inv(k2,x2,y)
| Degradation2(kD,y)
)
def PI(kP,kI, r, y, v) = 
( SummationInv(1.0,1.0,1.0,r,y,e)
| Integration(kI,e,x)
| Summation(kP,1.0,1.0,e,x,v)
| Annihilation(x)
)
def Plant(v, y) =
( rxn Signal(v)  ->{0.2} Signal(v)  + Signal(y)
| rxn Signal'(v) ->{0.2} Signal'(v) + Signal'(y)
| rxn Signal(y)  ->{0.1}
| rxn Signal'(y) ->{0.1}
| rxn Load() + Signal(y)   ->{0.01} Load()
| rxn Load'() + Signal'(y) ->{0.01} Load'()
| rxn Load() + Load'() ->{1.0}
)
def Plottables() =
( 0 * R()
| 0 * R'()
| 0 * V()
| 0 * V'()
| 0 * Y()
| 0 * Y'()
| 0 * Load()
| 0 * Load'()
)

(*------------------ Full system  ----------------------------*)
def System() =
( Plottables()
| x0 * R()
| PI(1.0,1.0,r,y,v)
| Plant(v,y)
| Annihilation(r)
| Annihilation(y)
| Annihilation(v)
| Annihilation(e)
)

(*------------------ Tests -----------------------------------*)
def TestAnnihilation() = 
( 2 * X() | X'()
| Annihilation(x)
)
def TestCatalysis() = 
( X() | 0 * Y()
| Catalysis(1.0,x,y)
)
def TestDegradation() = 
( X() | 0 * X'()
| Degradation(1.0,x)
| Annihilation(x)
)
def TestGain() = 
( X() | 0 * Y() | 0 * Y'()
| Gain(1.0,2.0,x,y)
| Annihilation(y)
)
def TestSummation() = 
( 2 * X() | E() | 0 * V() | 0 * V'()
| Summation(1.0,1.0,1.0,x,e,v)
| Annihilation(v)
)
def TestSummationInv() = 
( 2 * Y() | R() | 0 * E() | 0 * E'()
| SummationInv(1.0,1.0,1.0,y,r,e)
| Annihilation(e)
)

(*------------------ Run -------------------------------------*)

System()
(*
TestAnnihilation()
TestCatalysis()
TestDegradation()
System()
TestGain()
TestSummation() 
TestSummationInv()
*)