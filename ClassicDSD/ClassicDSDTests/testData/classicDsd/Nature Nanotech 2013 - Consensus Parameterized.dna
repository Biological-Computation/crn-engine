directive simulation {final=54000; points=500; plots=[<t^ x>; <t^ y>; <t^ b>]; }
directive simulator deterministic
directive parameters [
  kF1_YY = 4.3095E-06, {interval=Real; distribution=Uniform(4.3095E-06,4.3095E-06); variation=Fixed};
  kJ1 = 7.9236E-06, {interval=Real; distribution=Uniform(7.9236E-06,7.9236E-06); variation=Fixed};
  kJ1r = 8.2974E-05, {interval=Real; distribution=Uniform(8.2974E-05,8.2974E-05); variation=Fixed};
  kJ2 = 0.00012138, {interval=Real; distribution=Uniform(0.00012138,0.00012138); variation=Fixed};
  kJ2r = 1.0223E-06, {interval=Real; distribution=Uniform(1.0223E-06,1.0223E-06); variation=Fixed};
  kJ3 = 0.0005016, {interval=Real; distribution=Uniform(0.0005016,0.0005016); variation=Fixed};
  kJ3r = 1.0123E-06, {interval=Real; distribution=Uniform(1.0123E-06,1.0123E-06); variation=Fixed};
  kF1 = 1.2721E-05, {interval=Real; distribution=Uniform(1.2721E-05,1.2721E-05); variation=Fixed};
  kF1r = 0.00023276, {interval=Real; distribution=Uniform(0.00023276,0.00023276); variation=Fixed};
  kF2 = 5.653E-05, {interval=Real; distribution=Uniform(5.653E-05,5.653E-05); variation=Fixed};
  kF2r = 0.00012561, {interval=Real; distribution=Uniform(0.00012561,0.00012561); variation=Fixed};
  kF3 = 7.4418E-05, {interval=Real; distribution=Uniform(7.4418E-05,7.4418E-05); variation=Fixed};
  kF3r = 1.0293E-06, {interval=Real; distribution=Uniform(1.0293E-06,1.0293E-06); variation=Fixed};
  kF4 = 1.3428E-06, {interval=Real; distribution=Uniform(1.3428E-06,1.3428E-06); variation=Fixed};
  kF5 = 0.00097709, {interval=Real; distribution=Uniform(0.00097709,0.00097709); variation=Fixed};
  X = 80, {interval=Real; distribution=Uniform(80,80); variation=Fixed};
  NG = 160, {interval=Real; distribution=Uniform(160,160); variation=Fixed};
  NH = 160, {interval=Real; distribution=Uniform(160,160); variation=Fixed};
  Nx = 0.7, {interval=Real; distribution=Uniform(0.7,0.7); variation=Fixed};
  leakXY2B_J = 0.0172, {interval=Real; distribution=Uniform(0.0172,0.0172); variation=Fixed};
  leakXY2B_F = 0.009, {interval=Real; distribution=Uniform(0.009,0.009); variation=Fixed};
  leakBX2X_J = 0.0114, {interval=Real; distribution=Uniform(0.0114,0.0114); variation=Fixed};
  leakBX2X_F = 2.2677E-06, {interval=Real; distribution=Uniform(2.2677E-06,2.2677E-06); variation=Fixed};
  leakBY2Y_J = 0.0105, {interval=Real; distribution=Uniform(0.0105,0.0105); variation=Fixed};
  leakBY2Y_F = 0.0154, {interval=Real; distribution=Uniform(0.0154,0.0154); variation=Fixed};
  badXY2B_X = 3.5686E-05, {interval=Real; distribution=Uniform(3.5686E-05,3.5686E-05); variation=Fixed};
  badXY2B_Y = 7.6834E-05, {interval=Real; distribution=Uniform(7.6834E-05,7.6834E-05); variation=Fixed};
  badBX2X_B = 0.1504, {interval=Real; distribution=Uniform(0.1504,0.1504); variation=Fixed};
  badBX2X_X = 0.1195, {interval=Real; distribution=Uniform(0.1195,0.1195); variation=Fixed};
  badBY2Y_B = 1.0204E-05, {interval=Real; distribution=Uniform(1.0204E-05,1.0204E-05); variation=Fixed};
  badBY2Y_Y = 0.25, {interval=Real; distribution=Uniform(0.25,0.25); variation=Fixed};
]
directive sweeps [
  mysweep = [Nx = [0.1; 0.2; 0.3; 0.4; 0.5; 0.6; 0.7; 0.8; 0.9]];
]
directive compilation infinite
directive declare
new t  @ 0.0, 0.0
new u1  @ 0.0, 0.0
new u2  @ 0.0, 0.0
new u3  @ 0.0, 0.0
new b 
new x 
new y 
new rbx 
new rby 
new rxy 
new pb 
new px 
new py 
new ig 
new fl  @ 0.0, 0.0
def Input(ta, a) = <ta^ a>
def Catalyst(tb, b) = <tb^ b>
def Helper(tr, r) = <tr^ r>
def Translator(r, tq) = <r tq^>
def Output1R(b, tr) = <b tr^>
def Output2R(c, tb) = <c tb^>
def Output3R(d, tc) = <d tc^>
def End(i, tc) = <i tc^>
def Signal_Fork(c, fl) = <c fl^>
def Signal_Join(fl, r) = <fl^ r>
def Join(ta, a, tb, b, tr, r, tq) = {ta^*}[a tb^]:[b tr^]:[r tq^]
def Join1(ta, a, tb, b, tr, r, tq) = [ta^ a]:{tb^*}[b tr^]:[r tq^]
def Join2(ta, a, tb, b, tr, r, tq) = [ta^ a]:[tb^ b]:{tr^*}[r tq^]
def Join3(ta, a, tb, b, tr, r, tq) = [ta^ a]:[tb^ b]:[tr^ r]{tq^*}
def Fork(i, td, d, tc, c, tb, b, tr, r, tq) = [i]:[td^ d]:[tc^ c]:[tb^ b]:[tr^ r]{tq^*}
def Fork1(i, td, d, tc, c, tb, b, tr, r, tq) = [i]:[td^ d]:[tc^ c]:[tb^ b]:{tr^*}[r tq^]
def Fork2(i, td, d, tc, c, tb, b, tr, r, tq) = [i]:[td^ d]:[tc^ c]:{tb^*}[b tr^]:[r tq^]
def Fork3(i, td, d, tc, c, tb, b, tr, r, tq) = [i]:[td^ d]:{tc^*}[c tb^]:[b tr^]:[r tq^]
def Fork4(i, td, d, tc, c, tb, b, tr, r, tq) = [i]:{td^*}[d tc^]:[c tb^]:[b tr^]:[r tq^]
def Fork5(i, td, d, tc, c, tb, b, tr, r, tq) = [i td^]:[d tc^]:[c tb^]:[b tr^]:[r tq^]
def JoinAB(NA, NB, NH, NG, NV, Leak, ta, a, tb, b, tr, r, tq) = 
  (( (NG * (1.0 - Leak)) * Join(ta,a,tb,b,tr,r,tq)
  | (NG * Leak) * Translator(r,tq)
  | NA * Input(ta,a)
  | NB * Catalyst(tb,b)
  | NH * Helper(tr,r)
  | rxn <ta^ a> + Join(ta,a,tb,b,tr,r,tq) <->{kJ1}{kJ1r} <a tb^> + Join1(ta,a,tb,b,tr,r,tq)
  | rxn <tb^ b> + Join1(ta,a,tb,b,tr,r,tq) <->{kJ2}{kJ2r} <b tr^> + Join2(ta,a,tb,b,tr,r,tq)
  | rxn <tr^ r> + Join2(ta,a,tb,b,tr,r,tq) <->{kJ3}{kJ3r} <r tq^> + Join3(ta,a,tb,b,tr,r,tq)))
def ForkXYZ(N, NH1, NH2, NH3, NH4, NG, Leak, i, tz, z, ty, y, tx, x, tr, r, tq, k1) = 
  (( (NG * (1.0 - Leak)) * Fork(i,tz,z,ty,y,tx,x,tr,r,tq)
  | N * Translator(r,tq)
  | NH1 * Output1R(x,tr)
  | NH2 * Output2R(y,tx)
  | NH3 * Output3R(z,ty)
  | NH4 * End(i,tz)
  | rxn <r tq^> + Fork(i,tz,z,ty,y,tx,x,tr,r,tq) <->{k1}{kF1r} <tr^ r> + Fork1(i,tz,z,ty,y,tx,x,tr,r,tq)
  | rxn <x tr^> + Fork1(i,tz,z,ty,y,tx,x,tr,r,tq) <->{kF2}{kF2r} <tx^ x> + Fork2(i,tz,z,ty,y,tx,x,tr,r,tq)
  | rxn <y tx^> + Fork2(i,tz,z,ty,y,tx,x,tr,r,tq) <->{kF3}{kF3r} <ty^ y> + Fork3(i,tz,z,ty,y,tx,x,tr,r,tq)
  | rxn <z ty^> + Fork3(i,tz,z,ty,y,tx,x,tr,r,tq) <->{kF4}{kF2r} <tz^ z> + Fork4(i,tz,z,ty,y,tx,x,tr,r,tq)
  | rxn <i t^> + Fork4(i,tz,z,ty,y,tx,x,tr,r,tq) ->{kF5} Fork5(i,tz,z,ty,y,tx,x,tr,r,tq) + <i>))
def JoinBX(NB, NX, NH, NG, Leak) = JoinAB(NB,NX,NH,NG,0.0,Leak,t,b,t,x,t,rbx,u1)
def JoinBY(NB, NY, NH, NG, Leak) = JoinAB(NB,NY,NH,NG,0.0,Leak,t,b,t,y,t,rby,u1)
def JoinXY(NX, NY, NH, NG, Leak) = JoinAB(NX,NY,NH,NG,0.0,Leak,t,x,t,y,t,rxy,u1)
def ForkBB(NT, NH1, NH2, NH3, NH4, NG, Leak) = ForkXYZ(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,b,u3,pb,t,b,u2,rxy,u1,kF1)
def ForkXX(NT, NH1, NH2, NH3, NH4, NG, Leak) = ForkXYZ(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,x,u3,px,t,x,u2,rbx,u1,kF1)
def ForkYY(NT, NH1, NH2, NH3, NH4, NG, Leak) = ForkXYZ(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,y,u3,py,t,y,u2,rby,u1,kF1_YY)
def XY2B(Nx, Ny, X, NH, NG) = 
  (( JoinXY(((X * Nx) * (1.0 - badXY2B_X)),((X * Ny) * (1.0 - badXY2B_Y)),NH,NG,leakXY2B_J)
  | ForkBB(0.0,NH,NH,NH,NH,NG,leakXY2B_F)))
def BX2X(N, X, NH, NG) = 
  (( JoinBX((X * (1.0 - badBX2X_B)),((X * N) * (1.0 - badBX2X_B)),NH,NG,leakBX2X_J)
  | ForkXX(0.0,NH,NH,NH,NH,NG,leakBX2X_F)))
def BY2Y(N, X, NH, NG) = 
  (( JoinBY((X * (1.0 - badBY2Y_B)),((X * N) * (1.0 - badBY2Y_B)),NH,NG,leakBY2Y_J)
  | ForkYY(0.0,NH,NH,NH,NH,NG,leakBY2Y_F)))
def AM() = 
  (( XY2B(Nx,(1.0 - Nx),X,NH,NG)
  | BX2X(0.0,0.0,NH,NG)
  | BY2Y(0.0,0.0,(NH * 1.2),(NG * 1.2))
  | (NH * 0.8) * <ig t^>))
def N = 0.4
AM()