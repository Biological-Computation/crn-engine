directive sample 5000.0 200
directive compilation infinite
directive simulation deterministic
directive declare
directive time s
directive concentration nM
directive plot <t^ x>; <t^ y>; <t^ b>

directive parameters [
(* Rates *)
ka,(1.0e-5,2.0e-3),0.0003,log,random;
kq,(1.0e-5,2.0e-3),0.0003,log,random;
kr,(1.0e-5,2.0e-3),0.0003,log,random;
kb,(1.0e-5,2.0e-3),0.0003,log,random;
kc,(1.0e-5,2.0e-3),0.0003,log,random;
ua,(1.0e-4,2.0e+1),0.1,log,fixed;
ub,(1.0e-4,2.0e+1),0.1,log,fixed;
ur,(1.0e-4,2.0e+1),0.1,log,fixed;
uq,(1.0e-4,2.0e+1),0.1,log,fixed;
uc,(1.0e-4,2.0e+1),0.1,log,fixed;
kt,(1.0e-5,2.0e-3),0.0003,log,random;
ku1,(1.0e-5,2.0e-3),0.0003,log,random;
ku2,(1.0e-5,2.0e-3),0.0003,log,random;
ku3,(1.0e-5,2.0e-3),0.0003,log,random;
ut,(1.0e-4,2.0e+1),0.1,log,fixed;
uu1,(1.0e-4,2.0e+1),0.1,log,fixed;
uu2,(1.0e-4,2.0e+1),0.1,log,fixed;
uu3,(1.0e-4,2.0e+1),0.1,log,fixed;

(* Concentrations *)
X  = 50.0; NG  = 75.0;  NH  = 100.0; NR  = 150.0; (* Default *)
Xv = 40.0; NGv = 120.0; NHv = 120.0; NRv = 120.0; (* Reversibles *)
Xh = 10.0; NGh = 15.0;  NHh = 20.0;  NRh = 30.0;  (* Halves *)
Xi = 10.0; NGi = 30.0;  NHi = 30.0;  NRi = 30.0; NMi = 100.0; (* Intermediates *)
Xr = 1.0; NRr = 3.0; (* Reporters *)
Xm = 40.0; NGm = 80.0; NHm = 80.0; NRm = 120.0; (* Consensus *)

(* Leak parameters *)
leakXY2B_J,(0.0,0.1),0.01,real,fixed; badXY2B_X,(0.0,0.3),0.01,real,fixed;
leakXY2B_F,(0.0,0.1),0.01,real,fixed; badXY2B_Y,(0.0,0.3),0.01,real,fixed;
leakBX2X_J,(0.0,0.1),0.01,real,fixed; badBX2X_B,(0.0,0.3),0.01,real,fixed;
leakBX2X_F,(0.0,0.1),0.01,real,fixed; badBX2X_X,(0.0,0.3),0.01,real,fixed;
leakBY2Y_J,(0.0,0.1),0.01,real,fixed; badBY2Y_B,(0.0,0.3),0.01,real,fixed;
leakBY2Y_F,(0.0,0.1),0.01,real,fixed; badBY2Y_Y,(0.0,0.3),0.01,real,fixed;

leakJoinBX_B,(0.0,0.1),0.01,real,fixed; badJoinBX_B,(0.0,0.3),0.01,real,fixed;
leakJoinBX_X,(0.0,0.1),0.01,real,fixed; badJoinBX_X,(0.0,0.3),0.01,real,fixed;
leakJoinBX_H,(0.0,0.1),0.01,real,fixed; badJoinBX_H,(0.0,0.3),0.01,real,fixed;
leakJoinBY_B,(0.0,0.1),0.01,real,fixed; badJoinBY_B,(0.0,0.3),0.01,real,fixed;
leakJoinBY_Y,(0.0,0.1),0.01,real,fixed; badJoinBY_Y,(0.0,0.3),0.01,real,fixed;
leakJoinBY_H,(0.0,0.1),0.01,real,fixed; badJoinBY_H,(0.0,0.3),0.01,real,fixed;
leakJoinXY_X,(0.0,0.1),0.01,real,fixed; badJoinXY_X,(0.0,0.3),0.01,real,fixed;
leakJoinXY_Y,(0.0,0.1),0.01,real,fixed; badJoinXY_Y,(0.0,0.3),0.01,real,fixed;
leakJoinXY_H,(0.0,0.1),0.01,real,fixed; badJoinXY_H,(0.0,0.3),0.01,real,fixed;

leakFork2B_R,(0.0,0.1),0.01,real,fixed; badFork2B_R,(0.0,0.3),0.01,real,fixed;
leakFork2B_H1,(0.0,0.1),0.01,real,fixed; badFork2B_H1,(0.0,0.3),0.01,real,fixed;
leakFork2B_H2,(0.0,0.1),0.01,real,fixed; badFork2B_H2,(0.0,0.3),0.01,real,fixed;
leakFork2X_R,(0.0,0.1),0.01,real,fixed; badFork2X_R,(0.0,0.3),0.01,real,fixed;
leakFork2X_H1,(0.0,0.1),0.01,real,fixed; badFork2X_H1,(0.0,0.3),0.01,real,fixed;
leakFork2X_H2,(0.0,0.1),0.01,real,fixed; badFork2X_H2,(0.0,0.3),0.01,real,fixed;
leakFork2Y_R,(0.0,0.1),0.01,real,fixed; badFork2Y_R,(0.0,0.3),0.01,real,fixed;
leakFork2Y_H1,(0.0,0.1),0.01,real,fixed; badFork2Y_H1,(0.0,0.3),0.01,real,fixed;
leakFork2Y_H2,(0.0,0.1),0.01,real,fixed; badFork2Y_H2,(0.0,0.3),0.01,real,fixed
]

new fl@0.0,0.0

def Input(ta,a) = <ta^ a>
def Catalyst(tb,b) = <tb^ b>
def Helper(tr,r) = <tr^ r>
def Output(tc,c) = <tc^ c>

def Translator(r,tq) = <r tq^>
def InputR(a,tb) = <a tb^>
def OutputR(c,tr) = <c tr^>
def CatalystR(b,tr) = <b tr^>
def Output1R(b,tr) = <b tr^>
def Output2R(c,tb) = <c tb^>
def Output3R(d,tc) = <d tc^>
def End(i,tc) = <i tc^>
def Signal_Fork(c,fl) = <c fl^>
def Signal_Join(fl,r) = <fl^ r>
def Rep_Fork(tc,c) = {tc^*}[c]<fl^>
def Rep_Join(r,tq) = <fl^>[r]{tq^*}
def Join_AB(ta,a,tb,b,tr,r,tq) = {ta^*}[a tb^]:[b tr^]:[r tq^]
def Fork_C(i,tc,c,tr,r,tq) = [i]:[tc^ c]:[tr^ r]{tq^*}
def Fork_BC(i,tc,c,tb,b,tr,r,tq) = [i]:[tc^ c]:[tb^ b]:[tr^ r]{tq^*}
def Fork_BCD(i,td,d,tc,c,tb,b,tr,r,tq) = [i]:[td^ d]:[tc^ c]:[tb^ b]:[tr^ r]{tq^*}

(* Module definitions *)
def Join(NA,NB,NH,NG,NV,Leak,ta,a,tb,b,tr,r,tq) =
( NG*(1.0-Leak) * Join_AB(ta,a,tb,b,tr,r,tq)
| NG*Leak * Translator(r,tq)
| NA * Input(ta,a)
| NB * Catalyst(tb,b)
| NH * Helper(tr,r)
| NV * InputR(a,tb)
| NV * CatalystR(b,tr)
)
def Fork(N,NH1,NH2,NG,Leak,i,tc,c,tr,r,tq) =
( NG*(1.0-Leak) * Fork_C(i,tc,c,tr,r,tq)
| NG*Leak * Output(tc,c)
| N * Translator(r,tq)
| NH1 * OutputR(c,tr)
| NH2 * End(i,tc)
| 0 * Helper(tr,r)
)
def Fork2(N,NH1,NH2,NH3,NG,Leak,i,tc,c,tb,b,tr,r,tq) =
( NG*(1.0-Leak) * Fork_BC(i,tc,c,tb,b,tr,r,tq)
| NG*Leak * Output(tc,c)
| N * Translator(r,tq)
| NH1 * CatalystR(b,tr)
| NH2 * OutputR(c,tb)
| NH3 * End(i,tc)
| 0 * Helper(tr,r)
| 0 * Catalyst(tb,b)
)
def Fork3(N,NH1,NH2,NH3,NH4,NG,Leak,i,td,d,tc,c,tb,b,tr,r,tq) =
( NG*(1.0-Leak) * Fork_BCD(i,td,d,tc,c,tb,b,tr,r,tq)
| N * Translator(r,tq)
| NH1 * Output1R(b,tr)
| NH2 * Output2R(c,tb)
| NH3 * Output3R(d,tc)
| NH4 * End(i,td)
| 0 * Helper(tr,r)
)
def RepJoin(N,NR,r,tq) =
( N * Translator(r,tq)
| NR * Rep_Join(r,tq)
| 0 * Signal_Join(fl,r)
)
def RepFork(N,NR,tc,c) =
( N * Output(tc,c)
| NR * Rep_Fork(tc,c)
| 0 * Signal_Fork(c,fl)
)

(* DNA domains *)
dom t = {seq = CTGATC; bind=kt; unbind=ut}
dom u1 = {seq = CTTCAG; bind=ku1; unbind=ut}
dom u2 = {seq = CCATAC; bind=ku2; unbind=ut}
dom u3 = {seq = ATACCC; bind=ku3; unbind=ut}
dom x = {seq = CATTGCTTTATTTACCGAGTCTTAT}
dom y = {seq = CATTGCCTAACCCACCGAGTCCTTT}
dom b = {seq = CATTGCCAATTCCTACGAGTCTACC}
dom pb = {seq = CATTGCATTATATTCCGAGTCCTAC}
dom px = {seq = CATTGCCTTCCCACTAGAGTCTCAC}
dom py = {seq = CATTGCACCACCCTAAGAGTCTAAC}
dom rxy = {seq = CATTGCTACCACCTCCGAGTCTAAC}
dom rbx = {seq = CATTGCCAAACCATTAGAGTCAAAC}
dom rby = {seq = CATTGCACCCTAATACGAGTCTCAC}
dom ig = {seq = CTGAAATAAATAAATAGAGTCTACC}

(* Components *)
def RepJoinBX(NR) = RepJoin(0.0,NR,rbx,u1)
def RepJoinBY(NR) = RepJoin(0.0,NR,rby,u1)
def RepJoinXY(NR) = RepJoin(0.0,NR,rxy,u1)
def JoinBX(NB,NX,NH,NG,Leak) = Join(NB,NX,NH,NG,0.0,Leak,t,b,t,x,t,rbx,u1)
def JoinBY(NB,NY,NH,NG,Leak) = Join(NB,NY,NH,NG,0.0,Leak,t,b,t,y,t,rby,u1)
def JoinXY(NX,NY,NH,NG,Leak) = Join(NX,NY,NH,NG,0.0,Leak,t,x,t,y,t,rxy,u1)
def Fork2B(NT,NH1,NH2,NH3,NH4,NG,Leak,NR) =   ( Fork3(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,b,u3,pb,t,b,u2,rxy,u1) | RepFork(NG*Leak,NR,u3,pb) )
def ForkXY2B(NT,NH1,NH2,NH3,NH4,NG,Leak,NR) = ( Fork3(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,b,u3,pb,t,b,u2,rxy,u1) | RepFork(NG*Leak,NR,t,b) )
def Fork2X(NT,NH1,NH2,NH3,NH4,NG,Leak,NR) = ( Fork3(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,x,u3,px,t,x,u2,rbx,u1) | RepFork(NG*Leak,NR,u3,px) )
def Fork2Y(NT,NH1,NH2,NH3,NH4,NG,Leak,NR) = ( Fork3(NT,NH1,NH2,NH3,NH4,NG,Leak,ig,t,y,u3,py,t,y,u2,rby,u1) | RepFork(NG*Leak,NR,u3,py) )

(* Circuits that have been measured *)
def JoinBX_AddB(N) = ( JoinBX(N*Xi*(1.0-badJoinBX_B),NMi,NMi,NGi,leakJoinBX_B) | RepJoinBX(NRi) )
def JoinBX_AddX(N) = ( JoinBX(NMi,N*Xi*(1.0-badJoinBX_X),NMi,NGi,leakJoinBX_X) | RepJoinBX(NRi) )
def JoinBX_AddH(N) = ( JoinBX(NMi,NMi,N*Xi*(1.0-badJoinBX_H),NGi,leakJoinBX_H) | RepJoinBX(NRi) )
def JoinBY_AddB(N) = ( JoinBY(N*Xi*(1.0-badJoinBY_B),NMi,NMi,NGi,leakJoinBY_B) | RepJoinBY(NRi) )
def JoinBY_AddY(N) = ( JoinBY(NMi,N*Xi*(1.0-badJoinBY_Y),NMi,NGi,leakJoinBY_Y) | RepJoinBY(NRi) )
def JoinBY_AddH(N) = ( JoinBY(NMi,NMi,N*Xi*(1.0-badJoinBY_H),NGi,leakJoinBY_H) | RepJoinBY(NRi) )
def JoinXY_AddX(N) = ( JoinXY(N*Xi*(1.0-badJoinXY_X),NMi,NMi,NGi,leakJoinXY_X) | RepJoinXY(NRi) )
def JoinXY_AddY(N) = ( JoinXY(NMi,N*Xi*(1.0-badJoinXY_Y),NMi,NGi,leakJoinXY_Y) | RepJoinXY(NRi) )
def JoinXY_AddH(N) = ( JoinXY(NMi,NMi,N*Xi*(1.0-badJoinXY_H),NGi,leakJoinXY_H) | RepJoinXY(NRi) )
def Fork2B_AddR(N) =  ( Fork2B(N*Xi*(1.0-badFork2B_R ),NMi,NMi,NMi,NMi,NGi,leakFork2B_R,NRi) )
def Fork2B_AddH1(N) = ( Fork2B(NMi,N*Xi*(1.0-badFork2B_H1),NMi,NMi,NMi,NGi,leakFork2B_H1,NRi) )
def Fork2B_AddH2(N) = ( Fork2B(NMi,NMi,N*Xi*(1.0-badFork2B_H2),NMi,NMi,NGi,leakFork2B_H2,NRi) )
def Fork2X_AddR(N) =  ( Fork2X(N*Xi*(1.0-badFork2X_R ),NMi,NMi,NMi,NMi,NGi,leakFork2X_R,NRi) )
def Fork2X_AddH1(N) = ( Fork2X(NMi,N*Xi*(1.0-badFork2X_H1),NMi,NMi,NMi,NGi,leakFork2X_H1,NRi) )
def Fork2X_AddH2(N) = ( Fork2X(NMi,NMi,N*Xi*(1.0-badFork2X_H2),NMi,NMi,NGi,leakFork2X_H2,NRi) )
def Fork2Y_AddR(N) =  ( Fork2Y(N*Xi*(1.0-badFork2Y_R ),NMi,NMi,NMi,NMi,NGi,leakFork2Y_R,NRi) )
def Fork2Y_AddH1(N) = ( Fork2Y(NMi,N*Xi*(1.0-badFork2Y_H1),NMi,NMi,NMi,NGi,leakFork2Y_H1,NRi) )
def Fork2Y_AddH2(N) = ( Fork2Y(NMi,NMi,N*Xi*(1.0-badFork2Y_H2),NMi,NMi,NGi,leakFork2Y_H2,NRi) )
def XY2B(Nx,Ny,X,NH,NG,NR) = ( JoinXY(X*Nx*(1.0-badXY2B_X),X*Ny*(1.0-badXY2B_Y),NH,NG,leakXY2B_J) | ForkXY2B(0.0,NH,NH,NH,NH,NG,leakXY2B_F,NR) )
def BX2X(N,X,NH,NG,NR) = ( JoinBX(X*(1.0-badBX2X_B),X*N*(1.0-badBX2X_B),NH,NG,leakBX2X_J) | Fork2X(0.0,NH,NH,NH,NH,NG,leakBX2X_F,NR) )
def BY2Y(N,X,NH,NG,NR) = ( JoinBY(X*(1.0-badBY2Y_B),X*N*(1.0-badBY2Y_B),NH,NG,leakBY2Y_J) | Fork2Y(0.0,NH,NH,NH,NH,NG,leakBY2Y_F,NR) )
def AM(Nx,Ny) = ( XY2B(Nx,Ny,Xm,NHm,NGm,NRm) | BX2X(0.0,0.0,NHm,NGm,NRm) | BY2Y(0.0,0.0,NHm*1.2,NGm*1.2,NRm) | NHm * 0.8 * End(ig, t) (*<ig t^> *) )

(* Specify circuit regime *)
def N = 0.4
def Nx = 0.3
def Ny = 0.7
AM(Nx,Ny)