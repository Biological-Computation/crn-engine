directive declare
directive simulation deterministicstiff
directive parameters
  [ deg = 0.0008
  ; cat = 0.0008
  ; pol = 0.0167
  ; nick = 0.0167
  ; x0 = 4.0 (* 4.0, 8.0 *)
  ; ann = 0.01 (* 0.01, 0.001 *)
  ; bind = 5.4e-6
  ; bind2 = 0.001  (* 0.001, 5.4e-6 *)
  ; bind1 = 0.00005
  ; unbind = 0.1126
  ; Cmax = 1000.0 
  ; c = 0.0008
  ; kt = 0.001
  ; ku = 0.001
  ; s = 2.0
  ]
(* Circuit component settings *)
(*
directive duration 10000.0 points 1000
directive plot X(); X'(); Y(); Y'(); R(); 
E(); E'(); V(); V'()
*)
(* PI Controller settings *)

directive duration 150000.0 points 1000
directive plot
  sub (R(); R'());
  sub (V(); V'());
  sub (Y(); Y'());
  sub (L(); L'())

directive event R'() 2.0*x0 @  50000.0
directive event R() 2.0*x0 @ 100000.0

(*
directive event <load> 2.0 @ 50000.0
directive event <load'> 1.0 @ 100000.0  
*)

(*
directive duration 500000.0 points 1000
directive event Signal'(r)   2*x0 @  50000.0
directive event Signal(r)    2*x0 @ 100000.0
directive event Signal'(r)   2*x0 @ 150000.0
directive event Signal(r)     2*x0 @ 200000.0
directive event Signal'(r)   2*x0 @ 250000.0
directive event Signal(r)     2*x0 @ 300000.0
directive event Signal'(r)  2*x0 @ 350000.0
directive event Signal(r)     2*x0 @ 400000.0
directive event Signal'(r)  2*x0 @ 450000.0
*)
(*------------------ DNA Enzymes ------------------*)

directive compilation default
directive unproductive

dom x1 = {colour = "red"; bind = bind; unbind = unbind}
dom x2 = {colour = "red"; bind = bind; unbind = unbind}
dom r1 = {colour = "purple"; bind = bind; unbind = unbind}
dom r2 = {colour = "purple"; bind = bind; unbind = unbind}
dom e1 = {colour = "blue"; bind = bind; unbind = unbind}
dom e2 = {colour = "blue"; bind = bind; unbind = unbind}
dom v1 = {colour = "orange"; bind = bind; unbind = unbind}
dom v2 = {colour = "orange"; bind = bind; unbind = unbind}
dom y1 = {colour = "green"; bind = bind; unbind = unbind}
dom y2 = {colour = "green"; bind = bind; unbind = unbind}
dom load = {colour = "black"}
dom load' = {colour = "black"}
dom dx = {bind = ann; subdomains = [x1;x2]}
dom dr = {bind = ann; subdomains = [r1;r2]}
dom de = {bind = ann; subdomains = [e1;e2]}
dom dv = {bind = ann; subdomains = [v1;v2]}
dom dy = {bind = ann; subdomains = [y1;y2]}

def Signal((x1,x2)) = <x1^ x2^>
def Signal'((x1,x2)) = <x2^* x1^*>
def Template((x1,x2),(y1,y2)) = <x1^>[x2^]:[y1^ y2^]
def Template'((x1,x2),(y1,y2)) = <x2^*>[x1^*]:[y2^* y1^*]
def TemplateOff((x1,x2),(y1,y2)) = {x2^*}[y1^ y2^]
def TemplateOff'((x1,x2),(y1,y2)) = {x1^}[y2^* y1^*]
def TemplateDS((x1,x2),(y1,y2)) = <x1^>[x2^ y1^ y2^]
def TemplateDS'((x1,x2),(y1,y2)) = <x2^*>[x1^* y2^* y1^*]
def TemplateOffInv((x1,x2),(y1,y2)) = {x2^*}[y2^* y1^*]
def TemplateOffInv'((x1,x2),(y1,y2)) = {x1^}[y1^ y2^]
def TemplateInv((x1,x2),(y1,y2)) = <x1^>[x2^]:[y2^* y1^*]
def TemplateInv'((x1,x2),(y1,y2)) = <x2^*>[x1^*]:[y1^ y2^]
def TemplateDSInv((x1,x2),(y1,y2)) = <x1^>[x2^ y2^* y1^*]
def TemplateDSInv'((x1,x2),(y1,y2)) = <x2^*>[x1^* y1^ y2^]
def Ann((x1,x2)) = [x1^ x2^]

def r = (r1,r2)
def e = (e1,e2)
def v = (v1,v2)
def y = (y1,y2)
def x = (x1,x2)

def Catalysis(k,x,y) = 
( Cmax*k * TemplateOff(x,y)
| rxn Template(x,y) ->{pol} TemplateDS(x,y) + Signal(y)
| rxn TemplateDS(x,y) ->{nick} Template(x,y)
| 0 * Template(x,y) | 0 * TemplateDS(x,y) 
)
def Catalysis'(k,x,y) = 
( Cmax*k * TemplateOff'(x,y)
| rxn Template'(x,y) ->{pol} TemplateDS'(x,y) + Signal'(y)
| rxn TemplateDS'(x,y) ->{nick} Template'(x,y)
)
def CatalysisInv(k,x,y) = 
( Cmax*k * TemplateOffInv(x,y)
| rxn TemplateInv(x,y) ->{pol} TemplateDSInv(x,y) + Signal'(y)
| rxn TemplateDSInv(x,y) ->{nick} TemplateInv(x,y)
| 0 * TemplateInv(x,y) | 0 * TemplateDSInv(x,y) 
)
def CatalysisInv'(k,x,y) = 
( Cmax*k * TemplateOffInv'(x,y)
| rxn TemplateInv'(x,y) ->{pol} TemplateDSInv'(x,y) + Signal(y)
| rxn TemplateDSInv'(x,y) ->{nick} TemplateInv'(x,y)
)
def Annihilation(x) =  0*Ann(x)
def Degradation(k,x) = CatalysisInv(1.0/k,x,x)
def Degradation'(k,x) = CatalysisInv'(1.0/k,x,x)

(*------------------ Blocks --------------------------------*)
def Catalysis2(k,x,y) =
( Catalysis(k,x,y)
| Catalysis'(k,x,y)
)
def Catalysis2Inv(k,x,y) =
( CatalysisInv(k,x,y)
| CatalysisInv'(k,x,y)
)
def Degradation2(k,x) =
( Degradation(k,x)
| Degradation'(k,x)
)
def Integration(kI,x,y) = Catalysis2(kI,x,y)    
def Gain(k,kD,x,y) =
( Catalysis2(k,x,y) 
| Degradation2(kD,y)
)
def Summation(k1,k2,kD,x1,x2,y) = 
( Catalysis2(k1,x1,y) 
| Catalysis2(k2,x2,y)
| Degradation2(kD,y)
)
def SummationInv(k1,k2,kD,x1,x2,y) = 
( Catalysis2(k1,x1,y) 
| Catalysis2Inv(k2,x2,y)
| Degradation2(kD,y)
)
def PI(kP,kI, r, y, v,e) = 
( SummationInv(1.0,1.0,1.0,r,y,e)
| Integration(kI,e,x)
| Summation(kP,1.0,1.0,e,x,v)
| Annihilation(x)
)
def R()  = Signal(r)
def R'() = Signal'(r)
def E()  = Signal(e)
def E'() = Signal'(e)
def V()  = Signal(v)
def V'() = Signal'(v)
def Y()  = Signal(y)
def Y'() = Signal'(y)
def X() = Signal(x)
def X'() = Signal'(x)
def L() = <load>
def L'() = <load'>
def Plant(v, y) =
( rxn Signal(v)  ->{0.2} Signal(v)  + Signal(y)
| rxn Signal'(v) ->{0.2} Signal'(v) + Signal'(y)
| rxn Signal(y)  ->{0.1}
| rxn Signal'(y) ->{0.1}
| rxn Signal'(y) + Signal(y) ->{0.1}
| rxn L() + Signal(y)   ->{0.01} L()
| rxn L'() + Signal'(y) ->{0.01} L'()
| rxn L() + L'() ->{1.0}
)
(*------------------ Full system  ----------------------------*)
def System() =
( 0 * V() | 0 * V'()
| 0 * Y() | 0 * Y'() 
| 0 * L() | 0 * L'()
| x0* R() | 0 * R'() 
| PI(1.0,1.0,r,y,v,e)
| Plant(v,y)
| Annihilation(r)
| Annihilation(v)
| Annihilation(e)
)
(*------------------ Tests -----------------------------------*)
def TestAnnihilation() = 
( 2 * X() | X'()
| Annihilation(x)
)
def TestCatalysis() = 
( X() | 0 * Y()
| Catalysis(1.0,x,y)
)
def TestDegradation() = 
( X() | 0 * X'() 
| Degradation(1.0,x)
)
def TestGain() = 
( X() | 0 * Y() | 0 * Y'()
| Gain(1.0,2.0,x,y)
| Annihilation(y)
)
def TestSummation() = 
( 2 * X() | E() | 0 * V() | 0 * V'()
| Summation(1.0,1.0,1.0,x,e,v)
| Annihilation(v)
)
def TestSummationInv() = 
( 2 * Y() | R() | 0 * E() | 0 * E'()
| SummationInv(1.0,1.0,1.0,y,r,e)
| Annihilation(e)
)
(*------------------ Run -------------------------------------*)
System()
(*
System()
TestAnnihilation()
TestCatalysis()
TestDegradation()
TestGain()
TestSummation() 
TestSummationInv()
*)